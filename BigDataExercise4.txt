1.
Hadoop生态系统中HBase与其他部分的关系：Hbase利用Hadoop MapReduce来处理HBase中的海量数据，实现高性能计算；利用Zookeeper作为协同服务、实现稳定服务和失败恢复

2.
BigTable 是一个分布式存储系统，利用谷歌提出的MapReduce分布式并行计算模型来处理海量数据，使用谷歌分布式文件系统作为底层数据存储， Hbase是一个高可靠的、高性能、面向列、可伸缩的分布式数据库，是谷歌BigTable的开源实现

3.
Hbase与传统的关系型数据库的对比分析：
数据类型、数据操作、存储模式、数据索引、数据维护、可伸缩性

4.
Hbase提供了Native Java API、Hase Shell、Thrift Gateway、REST Gateway、 Pig、 Hive等多种访问接口

5.
Hbase数据模型：表、行、列族、列限定符、单元格、时间戳

6.
行健：访问表中通过单个行健来访问，在HBase内部， 行健保存为字节数组，数据按照行健的字典序顺序存储
列键：。。。。。。。。。。。
时间戳：每个单元格保存着同一个数据的多个版本，这些版本采用时间戳来进行索引

7.
物理视图和概念视图

8.
Hbase的实现包括三个功能组件：库函数，连接到每个客户端；一个Master服务器；许多个Region服务器

9.
Hbase的分区机制：每个表中只包含一个Region，随着数据的不断插入，Region会持续增大，当一个Region中包含的行数量达到一个阀值时，就会自动被等分为两个新的Region，随着表中行的数量的不断增加，就会分裂出越来越多的Region.

10.
每个Region都有一个RegionID来标识它的唯一性，这样，一个Region标识符就可以标识成“表名+开始主键+RegionID”

11.
第一层：Zookeeper文件，记录了-ROOT-表的位置信息
第二层：-ROOT-表 记录了.META.表的Region的位置信息
第三层：.META.表 记录了用户的数据表的Region的位置信息

12.
客户端在访问数据之前，需要首先访问Zookeeper，获取-ROOT-表的位置信息，然后访问-ROOT-表，获取.META.表的信息，接着访问.META.表， 找到所需打的Region具体位于哪个Region服务器，最后才会到该Region服务器读取数据

13.
HBase系统架构：客户端，包含访问HBase的接口，同时缓存中维护这已经访问过的Region的位置信息
Zookeeper服务器，实现集群管理的功能， Master， 主要负责表和Region的管理工作， Region服务器是Hbase中最核心的模块，负责维护分配自己的Region，并且响应用户的读写请求

14.
Region服务器向HDFS文件系统中读写数据的基本原理。。。。。。。。。。。

15.

16.
HBase系统为每个Region服务武器配置了一个HLog文件，是一种预写日志日志，也就是说，用户更新数据必须首先记录到日志后才能写入MemStore缓存，并且缓存内容对应的日志已经被写入磁盘之后，该缓存内容才会被刷新写入磁盘

17.
Region对象共用一个HLog的方式中，多个Region对象的更新操作所发生的的日志修改，只需要不断把日志记录追加到单个日志文件中，可以减少磁盘寻址次数，提高对表的写操作性能，缺点：。。。。。

18.
。。。。。

19.
Hbase shell常用命令
create 创建表
list 列出所有的表的信息
put 向表中指定的单元格添加数据
scan 浏览表的相关信息
alter 修改列族模式